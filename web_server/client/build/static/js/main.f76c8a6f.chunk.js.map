{"version":3,"sources":["NewsCard/NewsCard.js","NewsPanel/NewsPanel.js","App/App.js","serviceWorker.js","index.js","logo.svg"],"names":["NewsCard","url","window","open","_this","this","react_default","a","createElement","className","onClick","redirectToUrl","props","news","src","urlToImage","alt","title","description","source","reason","time","React","Component","NewsPanel","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","handleScroll","bind","assertThisInitialized","loadMoreNews","_","debounce","addEventListener","scrollY","pageYOffset","document","documentElement","scrollTop","innerHeight","body","offsetHeight","console","log","_this2","request","Request","method","headers","Accept","Content-Type","fetch","then","res","json","setState","concat","catch","e","news_list","map","src_NewsCard_NewsCard","renderNews","id","App","logo","src_NewsPanel_NewsPanel","Boolean","location","hostname","match","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.f76c8a6f.chunk.js","sourcesContent":["import React from 'react';\nimport './NewsCard.css';\n\nclass NewsCard extends React.Component {\n    redirectToUrl(url) {\n        window.open(url, '_blank');\n    }\n\n    render() {\n        return (\n            <div className=\"news-container\" onClick={() => this.redirectToUrl(this.props.news.url)}>\n                <div className='row'>\n                    <div className='col s4 fill'>\n                        <img src={this.props.news.urlToImage} alt='news'/>\n                    </div>\n                    <div className=\"col s8\">\n                        <div className=\"news-intro-col\">\n                            <div className=\"news-intro-panel\">\n                                <h4>{this.props.news.title}</h4>\n                                <div className=\"news-description\">\n                                    <p>{this.props.news.description}</p>\n                                    <div>\n                                        {this.props.news.source != null && <div className='chip light-blue news-chip'>{this.props.news.source}</div>}\n                                        {this.props.news.reason != null && <div className='chip light-green news-chip'>{this.props.news.reason}</div>}\n                                        {this.props.news.time != null && <div className='chip amber news-chip'>{this.props.news.time}</div>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NewsCard;","import './NewsPanel.css';\nimport React from 'react';\nimport NewsCard from '../NewsCard/NewsCard';\nimport _ from 'lodash';\n\nclass NewsPanel extends React.Component {\n    constructor() {\n        super();\n        this.state = { news:null };\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadMoreNews();\n        this.loadMoreNews = _.debounce(this.loadMoreNews, 1000);\n        window.addEventListener('scroll', this.handleScroll);\n    }\n\n    handleScroll() {\n        // different browser\n        let scrollY = window.scrollY ||\n            window.pageYOffset ||\n            document.documentElement.scrollTop;\n        if ((window.innerHeight + scrollY) >= (document.body.offsetHeight - 50)) {\n            console.log('Loading more news');\n            this.loadMoreNews();\n        }\n    }\n\n    loadMoreNews() {\n        let request = new Request('http://localhost:3000/news', {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n            }\n        });\n\n        fetch(request)\n            .then((res) => {\n                return res.json()\n            }).then((news) => {\n                console.log(news);\n                this.setState({\n                    news:this.state.news ? this.state.news.concat(news) : news,\n                });\n            })\n        .catch(e => console.log(e));\n    }\n\n    renderNews() {\n        const news_list = this.state.news.map(function(news) {\n            return(\n                <a className='list-group-item'>\n                    <NewsCard news={news} />\n                </a>\n            );\n        });\n\n        return(\n            <div className='container-fluid'>\n                <div className='list-group'>\n                    {news_list}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        if (this.state.news) {\n            return(\n                <div>\n                    {this.renderNews()}\n                </div>\n            );\n        } else {\n            return(\n                <div>\n                    <div id='msg-app-loading'>\n                        Loading...\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default NewsPanel;","import React, {Component} from 'react';\nimport logo from '../logo.svg';\nimport './App.css';\nimport NewsPanel from \"../NewsPanel/NewsPanel\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <img className='logo' src={logo} alt='logo'/>\n                <div className='container'>\n                    <NewsPanel/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the App load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web App is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different App. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your App to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}